from itertools import islice

import pytest

from seedseeker.generators import (
    FibonacciRng,
    Lcg,
    MersenneTwister,
    Ran3,
    Xoshiro,
    XoshiroState,
)


@pytest.mark.parametrize(
    ("seed", "expected"),
    [
        (
            1,
            [
                534011718,
                237820880,
                1002897798,
                1657007234,
                1412011072,
                929393559,
                760389092,
                2026928803,
                217468053,
                1379662799,
                61497087,
                532638534,
                687431273,
                2125508764,
                1464848243,
                1406361028,
            ],
        ),
        (
            929393559,
            [
                1701182233,
                206611663,
                2010562535,
                984316713,
                1555619780,
                674091677,
                1528008414,
                148445570,
                1037477743,
                636895950,
                1458968643,
                505840294,
                1843652884,
                1621236166,
                1001208652,
                1087530318,
            ],
        ),
        (
            2010562535,
            [
                1654674403,
                892046689,
                1797844735,
                330418716,
                1428517323,
                200887242,
                1359722423,
                291420382,
                1683380833,
                2004265938,
                347488802,
                1028327859,
                448623688,
                1027924295,
                1629204757,
                950538584,
            ],
        ),
        (
            1056528980,
            [
                113102371,
                1229995553,
                815082943,
                639547597,
                697865073,
                1884340349,
                1269829446,
                1782698562,
                590528129,
                729146810,
                1101180762,
                1941857505,
                1380209859,
                944249878,
                650816441,
                1245514401,
            ],
        ),
        (
            1941857505,
            [
                1903516642,
                1055075944,
                2108366542,
                439594767,
                794671660,
                147069995,
                1682887096,
                407532426,
                366008576,
                1518842953,
                295659143,
                217648562,
                1260290328,
                1281068443,
                1556947143,
                1132066593,
            ],
        ),
        (
            2108366542,
            [
                1839210153,
                2027439618,
                323780619,
                66448759,
                252598619,
                634823556,
                44038013,
                2105402371,
                1754922087,
                1864805857,
                1876286670,
                1160081740,
                818489241,
                1020250726,
                29254764,
                1192629506,
            ],
        ),
        (
            3641928041,
            [
                1497774405,
                540023237,
                694604052,
                2002951832,
                742140377,
                388712719,
                1926169249,
                218082734,
                1818936100,
                769705123,
                847323143,
                247344737,
                2051038317,
                1968064135,
                1492053598,
                1885026656,
            ],
        ),
    ],
)
def test_ran3(seed: int, expected: list[int]) -> None:
    """Test ran3 generator."""
    assert list(islice(Ran3(seed), len(expected))) == expected


@pytest.mark.parametrize(
    ("m", "a", "c", "x_0", "expected"),
    [
        (
            2**32,
            1664525,
            1013904223,
            1,
            [
                1015568748,
                1586005467,
                2165703038,
                3027450565,
                217083232,
                1587069247,
                3327581586,
                2388811721,
                70837908,
                2745540835,
                1075679462,
                1814098701,
                2536995080,
                3594602695,
                1009643386,
                4212701329,
            ],
        ),
        (
            2147483647,
            48271,
            0,
            1024,
            [
                49429504,
                157255767,
                1685920359,
                21362577,
                400803807,
                520391874,
                719930895,
                1203856791,
                463670541,
                766115577,
                1496616027,
                1802354237,
                436383316,
                2139436860,
                268084830,
                2133855755,
            ],
        ),
    ],
)
def test_lcg(m: int, a: int, c: int, x_0: int, expected: list[int]) -> None:
    """Test Linear Congruential Generator (LCG)."""
    assert list(islice(Lcg(m, a, c, x_0), len(expected))) == expected


@pytest.mark.parametrize(
    ("seed", "expected"),
    [
        (
            0,
            [
                2357136044,
                2546248239,
                3071714933,
                3626093760,
                2588848963,
                3684848379,
                2340255427,
                3638918503,
                1819583497,
                2678185683,
                2774094101,
                1650906866,
                1879422756,
                1277901399,
                3830135878,
                243580376,
            ],
        ),
        (
            1,
            [
                1791095845,
                4282876139,
                3093770124,
                4005303368,
                491263,
                550290313,
                1298508491,
                4290846341,
                630311759,
                1013994432,
                396591248,
                1703301249,
                799981516,
                1666063943,
                1484172013,
                2876537340,
            ],
        ),
        (
            1374466449,
            [
                4213376204,
                595271985,
                2222594631,
                4235045507,
                3876847032,
                1505952575,
                3858192833,
                900488458,
                2283861739,
                3795550791,
                2917998228,
                1285761863,
                3729946431,
                102143271,
                3462952260,
                1368659485,
            ],
        ),
    ],
)
def test_mersenne(seed: int, expected: list[int]) -> None:
    """Test the Mersenne Twister generator."""
    assert list(islice(MersenneTwister(seed), len(expected))) == expected


@pytest.mark.parametrize(
    ("seed", "expected"),
    [
        (
            [0, 1, 2, 3],
            [
                5760,
                17280,
                754992000,
                405323968728280320,
                202761714637215360,
                405621223416311904,
                10069219737298748256,
                13527984927766125024,
                2524417476840232240,
                6510814529291937504,
                7143872308526419812,
                5620685600764017478,
                2083272918701328793,
                2199914458068495325,
                12532767335422925752,
                16057831529042229353,
            ],
        ),
        (
            [293732, 114329, 934700, 172753],
            [
                658535040,
                4351155840,
                86316580759680,
                9980547090235875896,
                815478038297618352,
                12089251722991535220,
                13929050293168630269,
                16631310313680120630,
                3561597383563415311,
                13141148125821427202,
                8983772834659629890,
                13039864144719516167,
                7935626174311695752,
                17841864529115582950,
                8576699700050348776,
                1842851548107654129,
            ],
        ),
        (
            [
                7935626174311695752,
                17841864529115582950,
                8576699700050348776,
                1842851548107654129,
            ],
            [
                2328453069845740227,
                10506545942743665140,
                5397251037003359973,
                5707890643956951665,
                3293882349929340909,
                69042433711323626,
                10324068074658411109,
                18197695437620865747,
                9361433086934063093,
                10028733352488221883,
                12759746423309838316,
                15620491260616920247,
                14319050891999594981,
                16916327975486473993,
                2705557422240960976,
                11667017033309586417,
            ],
        ),
    ],
)
def test_xoshiro(seed: XoshiroState, expected: list[int]) -> None:
    """Test the Xoshiro generator."""
    assert list(islice(Xoshiro(seed), len(expected))) == expected


@pytest.mark.parametrize(
    ("r", "s", "m", "seed", "with_carry", "expected"),
    [
        (
            2,
            5,
            2**32,
            [1, 2, 3, 4, 5],
            False,
            [5, 7, 8, 11, 13, 16, 20, 24, 31, 37, 47, 57, 71, 88, 108, 135],
        ),
        (
            2,
            5,
            2**32,
            [2604821625, 2146792003, 3803786516, 1186200799, 436708137],
            False,
            [
                3791022424,
                2583500140,
                3299841644,
                3769700939,
                3736549781,
                3265756067,
                2025082625,
                2270630415,
                1499816268,
                1712212900,
                470605039,
                3737295525,
                2741235454,
                942144497,
                158481058,
                1412749536,
            ],
        ),
        (
            2,
            7,
            2**6,
            [9, 33, 16, 9, 12, 43, 13],
            True,
            [52, 46, 4, 56, 16, 35, 30, 23, 13, 28, 5, 45, 40, 11, 0, 25],
        ),
        (
            2,
            7,
            2**31,
            [
                901675201,
                333184018,
                1602430037,
                909995387,
                1283351641,
                434078192,
                139411313,
            ],
            True,
            [
                1335753393,
                472595331,
                790699782,
                1382590719,
                2074051423,
                1816668911,
                65979088,
                1004938657,
                538574420,
                1795638439,
                1921165139,
                1722206214,
                1590350403,
                1788185303,
            ],
        ),
    ],
)
def test_fibonacci(
    r: int, s: int, m: int, seed: list[int], with_carry: bool, expected: list[int]
) -> None:
    """Test the additive Lagged Fibonacci generator."""
    assert (
        list(islice(FibonacciRng(r, s, m, seed, with_carry), len(expected))) == expected
    )
